/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.opentsx.data.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Event extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3036419788307895622L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Event\",\"namespace\":\"org.opentsx.data.model\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"uri\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"double\"},{\"name\":\"producer_timestamp\",\"type\":\"long\"},{\"name\":\"consumer_timestamp\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Event> ENCODER =
      new BinaryMessageEncoder<Event>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Event> DECODER =
      new BinaryMessageDecoder<Event>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Event> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Event> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Event>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Event to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Event from a ByteBuffer. */
  public static Event fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long timestamp;
   private java.lang.CharSequence uri;
   private double value;
   private long producer_timestamp;
   private long consumer_timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Event() {}

  /**
   * All-args constructor.
   * @param timestamp The new value for timestamp
   * @param uri The new value for uri
   * @param value The new value for value
   * @param producer_timestamp The new value for producer_timestamp
   * @param consumer_timestamp The new value for consumer_timestamp
   */
  public Event(java.lang.Long timestamp, java.lang.CharSequence uri, java.lang.Double value, java.lang.Long producer_timestamp, java.lang.Long consumer_timestamp) {
    this.timestamp = timestamp;
    this.uri = uri;
    this.value = value;
    this.producer_timestamp = producer_timestamp;
    this.consumer_timestamp = consumer_timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return uri;
    case 2: return value;
    case 3: return producer_timestamp;
    case 4: return consumer_timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: uri = (java.lang.CharSequence)value$; break;
    case 2: value = (java.lang.Double)value$; break;
    case 3: producer_timestamp = (java.lang.Long)value$; break;
    case 4: consumer_timestamp = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'uri' field.
   * @return The value of the 'uri' field.
   */
  public java.lang.CharSequence getUri() {
    return uri;
  }

  /**
   * Sets the value of the 'uri' field.
   * @param value the value to set.
   */
  public void setUri(java.lang.CharSequence value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.Double getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.Double value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'producer_timestamp' field.
   * @return The value of the 'producer_timestamp' field.
   */
  public java.lang.Long getProducerTimestamp() {
    return producer_timestamp;
  }

  /**
   * Sets the value of the 'producer_timestamp' field.
   * @param value the value to set.
   */
  public void setProducerTimestamp(java.lang.Long value) {
    this.producer_timestamp = value;
  }

  /**
   * Gets the value of the 'consumer_timestamp' field.
   * @return The value of the 'consumer_timestamp' field.
   */
  public java.lang.Long getConsumerTimestamp() {
    return consumer_timestamp;
  }

  /**
   * Sets the value of the 'consumer_timestamp' field.
   * @param value the value to set.
   */
  public void setConsumerTimestamp(java.lang.Long value) {
    this.consumer_timestamp = value;
  }

  /**
   * Creates a new Event RecordBuilder.
   * @return A new Event RecordBuilder
   */
  public static org.opentsx.data.model.Event.Builder newBuilder() {
    return new org.opentsx.data.model.Event.Builder();
  }

  /**
   * Creates a new Event RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Event RecordBuilder
   */
  public static org.opentsx.data.model.Event.Builder newBuilder(org.opentsx.data.model.Event.Builder other) {
    return new org.opentsx.data.model.Event.Builder(other);
  }

  /**
   * Creates a new Event RecordBuilder by copying an existing Event instance.
   * @param other The existing instance to copy.
   * @return A new Event RecordBuilder
   */
  public static org.opentsx.data.model.Event.Builder newBuilder(org.opentsx.data.model.Event other) {
    return new org.opentsx.data.model.Event.Builder(other);
  }

  /**
   * RecordBuilder for Event instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Event>
    implements org.apache.avro.data.RecordBuilder<Event> {

    private long timestamp;
    private java.lang.CharSequence uri;
    private double value;
    private long producer_timestamp;
    private long consumer_timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.opentsx.data.model.Event.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.uri)) {
        this.uri = data().deepCopy(fields()[1].schema(), other.uri);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.producer_timestamp)) {
        this.producer_timestamp = data().deepCopy(fields()[3].schema(), other.producer_timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.consumer_timestamp)) {
        this.consumer_timestamp = data().deepCopy(fields()[4].schema(), other.consumer_timestamp);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Event instance
     * @param other The existing instance to copy.
     */
    private Builder(org.opentsx.data.model.Event other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.uri)) {
        this.uri = data().deepCopy(fields()[1].schema(), other.uri);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.value)) {
        this.value = data().deepCopy(fields()[2].schema(), other.value);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.producer_timestamp)) {
        this.producer_timestamp = data().deepCopy(fields()[3].schema(), other.producer_timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.consumer_timestamp)) {
        this.consumer_timestamp = data().deepCopy(fields()[4].schema(), other.consumer_timestamp);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public org.opentsx.data.model.Event.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public org.opentsx.data.model.Event.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'uri' field.
      * @return The value.
      */
    public java.lang.CharSequence getUri() {
      return uri;
    }

    /**
      * Sets the value of the 'uri' field.
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public org.opentsx.data.model.Event.Builder setUri(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.uri = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'uri' field.
      * @return This builder.
      */
    public org.opentsx.data.model.Event.Builder clearUri() {
      uri = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.Double getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public org.opentsx.data.model.Event.Builder setValue(double value) {
      validate(fields()[2], value);
      this.value = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public org.opentsx.data.model.Event.Builder clearValue() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'producer_timestamp' field.
      * @return The value.
      */
    public java.lang.Long getProducerTimestamp() {
      return producer_timestamp;
    }

    /**
      * Sets the value of the 'producer_timestamp' field.
      * @param value The value of 'producer_timestamp'.
      * @return This builder.
      */
    public org.opentsx.data.model.Event.Builder setProducerTimestamp(long value) {
      validate(fields()[3], value);
      this.producer_timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'producer_timestamp' field has been set.
      * @return True if the 'producer_timestamp' field has been set, false otherwise.
      */
    public boolean hasProducerTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'producer_timestamp' field.
      * @return This builder.
      */
    public org.opentsx.data.model.Event.Builder clearProducerTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'consumer_timestamp' field.
      * @return The value.
      */
    public java.lang.Long getConsumerTimestamp() {
      return consumer_timestamp;
    }

    /**
      * Sets the value of the 'consumer_timestamp' field.
      * @param value The value of 'consumer_timestamp'.
      * @return This builder.
      */
    public org.opentsx.data.model.Event.Builder setConsumerTimestamp(long value) {
      validate(fields()[4], value);
      this.consumer_timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'consumer_timestamp' field has been set.
      * @return True if the 'consumer_timestamp' field has been set, false otherwise.
      */
    public boolean hasConsumerTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'consumer_timestamp' field.
      * @return This builder.
      */
    public org.opentsx.data.model.Event.Builder clearConsumerTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Event build() {
      try {
        Event record = new Event();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.uri = fieldSetFlags()[1] ? this.uri : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.value = fieldSetFlags()[2] ? this.value : (java.lang.Double) defaultValue(fields()[2]);
        record.producer_timestamp = fieldSetFlags()[3] ? this.producer_timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.consumer_timestamp = fieldSetFlags()[4] ? this.consumer_timestamp : (java.lang.Long) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Event>
    WRITER$ = (org.apache.avro.io.DatumWriter<Event>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Event>
    READER$ = (org.apache.avro.io.DatumReader<Event>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
