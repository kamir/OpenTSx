/**
 * Eine Klasse zur ANZEIGE von mehreren Messreihen, die in einem Vector
 * Ã¼bergeben werden.
 *
 **/
package org.opentsx.chart.simple;

import org.opentsx.data.series.TimeSeriesObject;
import org.opentsx.data.exporter.MeasurementTable;
import java.awt.BorderLayout;
import java.awt.Rectangle;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Enumeration;
import java.util.Vector;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.svggen.SVGGraphics2D;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;

import org.jfree.chart.ChartUtilities;
//import simulation.datarecorder.GeneralResultRecorder;
//import util.LogFile;

public class MultiBarChart extends javax.swing.JDialog {

    public String chartTitle = "?";
    public String xLabel = "t";
    public String yLabel = "y(t)";
    public boolean useLegende = false;

    public boolean doStoreChart = true;
    public String filename = null;


    JFreeChart chart = null;
    public XYSeriesCollection dataset = new XYSeriesCollection();
    

    

    /** Creates new form MultiChart */
    public MultiBarChart(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setSize(800, 600);
        initChart();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        chartPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        statisticTextField = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        chartPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        chartPanel.setLayout(new java.awt.BorderLayout());
        jPanel1.add(chartPanel, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));

        statisticTextField.setColumns(20);
        statisticTextField.setRows(5);
        jScrollPane1.setViewportView(statisticTextField);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.EAST);

        jPanel3.setPreferredSize(new java.awt.Dimension(400, 47));

        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup().addContainerGap(331, Short.MAX_VALUE).addComponent(jButton1).addContainerGap()));
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup().addContainerGap(13, Short.MAX_VALUE).addComponent(jButton1).addContainerGap()));

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
    }

//    /**
//     * @param args the command line arguments
//     */
//    public static void save(final TimeSeriesObject mr) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//
//            public void run() {
//                final MultiChart dialog = new MultiChart(new javax.swing.JFrame(), false);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        dialog.setVisible(false);
//                    }
//                });
//                dialog.initMessreihe(mr);
//            }
//        });
//    }

    public static void open(TimeSeriesObject[] mrs ) {
        Vector<TimeSeriesObject> mr = new Vector<TimeSeriesObject>();
        for( int i = 0 ; i < mrs.length; i++ ) {
            mr.add( mrs[i] );
        };
        open(  mr, "?" ,"x","y", true );
    }

    public static void open(Vector<TimeSeriesObject> mrs ) {
         open(  mrs, "?" ,"x","y", true );
    }

    public static void openNormalized(final Vector<TimeSeriesObject> mrs, final String string, final String x, final String y, final boolean b) {
    java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                final MultiBarChart dialog = new MultiBarChart(new javax.swing.JFrame( string ), false);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        dialog.setVisible(false);
                    }
                });
                Enumeration<TimeSeriesObject> en = mrs.elements();
                while (en.hasMoreElements()) {
                    TimeSeriesObject mr = en.nextElement();
                    mr.normalize();
                    dialog.initMessreihe( mr );
                    System.out.println( mr.getStatisticData("> ") );
                }
                dialog.chartTitle = string;
                dialog.xLabel = x;
                dialog.yLabel = y;
                dialog.useLegende = b;

                dialog.initChart();
                dialog.setTitle(string);
                dialog.setVisible(true);
            }
        });

    }
    
    static boolean debug = false;

    public static void open(final Vector<TimeSeriesObject> mrs, final String string, final String x, final String y, final boolean b) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                final MultiBarChart dialog = new MultiBarChart(new javax.swing.JFrame( string ), false);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        dialog.setVisible(false);
                    }
                });
                Enumeration<TimeSeriesObject> en = mrs.elements();
                while (en.hasMoreElements()) {
                    TimeSeriesObject mr = en.nextElement();
                    dialog.initMessreihe( mr );
                    if ( debug ) System.out.println( mr.getStatisticData("> ") );
                }
                dialog.chartTitle = string;
                dialog.xLabel = x;
                dialog.yLabel = y;
                dialog.useLegende = b;

                dialog.initChart();
                dialog.setTitle(string);
                dialog.setVisible(true);
            }
        });
    }
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chartPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea statisticTextField;
    // End of variables declaration//GEN-END:variables


    private void initMessreihe(TimeSeriesObject mr) {
        XYSeries series = new XYSeries(mr.getLabel());

        Vector<Double> x = mr.getXValues();
        Vector<Double> y = mr.getYValues();

        for (int i = 0; i < x.size(); i++) {
            series.add(x.elementAt(i), y.elementAt(i));
        }
        this.addSerie(series);
    }

    public void addSerie(XYSeries serie) {
        dataset.addSeries(serie);
    }


    public void store(TimeSeriesObject mr, JFreeChart cp, File folder, String fileName ) {
        if (doStoreChart) {

            String fn = folder.getAbsolutePath() + File.separator + fileName;

            File file = null;

            try {

                file = new File(fn + ".svg");
                System.out.println(">>> Save as SVG Image - Filename: " + file.getAbsolutePath());
                //        ImageIO.write(rendImage, "png", file );


                // Get a DOMImplementation and create an XML document
                DOMImplementation domImpl =
                        GenericDOMImplementation.getDOMImplementation();
                Document document = domImpl.createDocument(null, "svg", null);

                // Create an instance of the SVG Generator
                SVGGraphics2D svgGenerator = new SVGGraphics2D(document);

                // draw the chart in the SVG generator
                cp.draw(svgGenerator, new Rectangle(800, 600));

                // Write svg file
                OutputStream outputStream = new FileOutputStream(file);
                Writer out = new OutputStreamWriter(outputStream, "UTF-8");
                svgGenerator.stream(out, true /* use css */);
                outputStream.flush();
                outputStream.close();
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }
    }


    private void initChart() {
        chartPanel.removeAll();
        ChartPanel cp = createChartPanel();
        chartPanel.add(cp, BorderLayout.CENTER);
    }

    public ChartPanel createChartPanel() {
        JFreeChart chart = ChartFactory.createHistogram(
                chartTitle,
                xLabel,
                yLabel,
                dataset,
                PlotOrientation.VERTICAL,
                useLegende, // legende
                true,
                true);
        // System.out.println(  chart.getXYPlot().getPlotType() );
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
        return chartPanel;
    }

    public void store(JFreeChart cp, File folder, String filename) {
        if (doStoreChart) {


//            File folder = LogFile.folderFile;
//            String fn = folder.getAbsolutePath() + File.separator + "images/Distribution_";
//            File file = null;
//            fn = fn + GeneralResultRecorder.currentSimulationLabel;


            String fn = filename;
            try {

                final File file1 = new File(folder.getAbsolutePath() + File.separator + fn + ".png");
                System.out.println("\n>>> Save as PNG Image - Filename: " + file1.getAbsolutePath()
                        + "; CP: "+ cp);
                            try {
                final ChartRenderingInfo info = new ChartRenderingInfo
                (new StandardEntityCollection());

                Thread.currentThread().sleep(1000);

                ChartUtilities.saveChartAsPNG(file1, chart, 600, 400, info);

                Thread.currentThread().sleep(1000);
            }
            catch (Exception e) {
                e.printStackTrace();
            }



//                File file = new File(folder.getAbsolutePath() + File.separator + fn + ".svg");
//                System.out.println(">>> Save as SVG Image - Filename: " + file.getAbsolutePath()
//                        + "; CP: "+ cp);
//
//
//                // Get a DOMImplementation and create an XML document
//                DOMImplementation domImpl =
//                        GenericDOMImplementation.getDOMImplementation();
//                Document document = domImpl.createDocument(null, "svg", null);
//
//                // Create an instance of the SVG Generator
//                SVGGraphics2D svgGenerator = new SVGGraphics2D(document);
//
//                // draw the chart in the SVG generator
//                cp.draw(svgGenerator, new Rectangle(800, 600));
//
//                // Write svg file
//                OutputStream outputStream = new FileOutputStream(file);
//                Writer out = new OutputStreamWriter(outputStream, "UTF-8");
//                svgGenerator.stream(out, true /* use css */);
//                outputStream.flush();
//                outputStream.close();
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }
    }



        public static void store(final Vector<TimeSeriesObject> mrs,
            final String string, final String x, final String y,
            final boolean b, final String folder, final String filename,
            String comment) {

                final MultiChart dialog = new MultiChart(new javax.swing.JFrame( string ), false);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        dialog.setVisible(false);
                    }
                });

                System.out.println( "### TS-Originale: " + folder + "/" + "TAB_" + filename + ".dat" );
                Enumeration<TimeSeriesObject> en = mrs.elements();
                while (en.hasMoreElements()) {
                    TimeSeriesObject mr = en.nextElement();
                    dialog.initMessreihe( mr );
                    //System.out.println( mr.getStatisticData("> ") );
                }
                dialog.chartTitle = string;
                dialog.xLabel = x;
                dialog.yLabel = y;
                dialog.useLegende = b;


                dialog.initChart();
                dialog.setTitle(string);
                dialog.setVisible(false);


                File f2 = new File( folder);

                dialog.store( dialog.chart, f2, filename);

                MeasurementTable tab = new MeasurementTable();

                if ( mrs.size() > 0 ) {
                    File f = new File( folder + "/" + "TAB_" + filename + ".dat" );
                    tab.setMessReihen( mrs );
                    tab.writeToFile( f );
                }
                




    }
}
