/**
 * Eine Klasse zur ANZEIGE von mehreren Messreihen, die in einem Vector
 * übergeben werden. Dabei gilt ein einheitliches Koordinatensystem für
 * alle Messreihen.
 *
 **/
package org.opentsx.chart.simple;

import org.opentsx.data.series.TimeSeriesObject;
import org.opentsx.data.exporter.MeasurementTable;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.io.File;
import java.util.Enumeration;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JTextArea;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
//import simulation.datarecorder.GeneralResultRecorder;
//import util.LogFile;

public class MultiChartTwoAxis extends javax.swing.JDialog {

    public String chartTitle = "?";
    public String xLabel = "#agents";
    public String yLabel = "t";
    public boolean useLegende = false;

    public boolean doStoreChart = true;
    public String filename = null;


    JFreeChart chart = null;
    public XYSeriesCollection dataset = new XYSeriesCollection();
    public XYSeriesCollection dataset2 = new XYSeriesCollection();


    public MultiChartTwoAxis() {};
    
    public MultiChartTwoAxis(String label) {
        super(new JFrame(label), false);
        initComponents();
        this.setSize(800, 600);
        initChart();
    }
    

    /** Creates new form MultiChart */
    public MultiChartTwoAxis(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setSize(800, 600);
        initChart();
    }

 

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    public void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        chartPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        statisticTextField = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        chartPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        chartPanel.setLayout(new java.awt.BorderLayout());
        jPanel1.add(chartPanel, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));

        statisticTextField.setColumns(20);
        statisticTextField.setRows(5);
        jScrollPane1.setViewportView(statisticTextField);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.EAST);

        jPanel3.setPreferredSize(new java.awt.Dimension(400, 47));

        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup().addContainerGap(331, Short.MAX_VALUE).addComponent(jButton1).addContainerGap()));
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup().addContainerGap(13, Short.MAX_VALUE).addComponent(jButton1).addContainerGap()));

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
    }

//    /**
//     * @param args the command line arguments
//     */
//    public static void save(final TimeSeriesObject mr) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//
//            public void run() {
//                final MultiChart dialog = new MultiChart(new javax.swing.JFrame(), false);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        dialog.setVisible(false);
//                    }
//                });
//                dialog.initMessreihe(mr);
//            }
//        });
//    }

    public static void open(TimeSeriesObject[] mrs, final String title, final String x, final String y, final boolean b) {
        Vector<TimeSeriesObject> mr = new Vector<TimeSeriesObject>();
        for( int i = 0 ; i < mrs.length; i++ ) {
            mr.add( mrs[i] );
        }
        open(  mr, title ,x ,y ,b, "no comment" );
    }

    public static void open(TimeSeriesObject[] mrs ) {
        open(  mrs, "?" ,"x","y", true );
    }
    public static void open(Vector<TimeSeriesObject> mrs ) {
         open(  mrs, "?" ,"x","y", true , "");
    }
    public static void open(Vector<TimeSeriesObject> mrs, boolean legende ) {
         open(  mrs, "?" ,"x","y", legende ,"");
    }
    public static void open(Vector<TimeSeriesObject> mrs, boolean legende, String label) {
         open(  mrs, label ,"RR","m", legende , "" );
    }

    public static void open(final Vector<TimeSeriesObject> mrs, final String string, final String x, final String y, final boolean b , final String comment) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//
//            public void run() {
                final MultiChartTwoAxis dialog = new MultiChartTwoAxis(new javax.swing.JFrame( string ), false);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        dialog.setVisible(false);
                    }
                });
                Enumeration<TimeSeriesObject> en = mrs.elements();
                int nr = 0;
                while (en.hasMoreElements()) {
                    TimeSeriesObject mr = en.nextElement();
                    dialog.initMessreihe( mr, nr );
                    //System.out.println( mr.getStatisticData("> ") );
                    nr++;
                }
                dialog.chartTitle = string;
                dialog.xLabel = x;
                dialog.yLabel = y;
                dialog.useLegende = b;
                dialog.statisticTextField.setText(comment);
                dialog.initChart();
                dialog.setTitle(string);
                dialog.setVisible(true);
//            }
//        });
    }

    public static Container openAndStore(final Vector<TimeSeriesObject> mrs,
            final String string, final String x, final String y,
            final boolean b, final String folder, final String filename,
            String comment) {

                final MultiChartTwoAxis dialog = new MultiChartTwoAxis(new javax.swing.JFrame( string ), false);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        dialog.setVisible(false);
                    }
                });
                Enumeration<TimeSeriesObject> en = mrs.elements();
                int nr = 0;
                while (en.hasMoreElements()) {
                    TimeSeriesObject mr = en.nextElement();
                    dialog.initMessreihe( mr, nr );
                    //System.out.println( mr.getStatisticData("> ") );
                    nr++;
                }
                dialog.chartTitle = string;
                dialog.xLabel = x;
                dialog.yLabel = y;
                dialog.useLegende = b;

                dialog.statisticTextField.setText( comment );

                dialog.initChart();
                dialog.setTitle(string);
                //dialog.setVisible(true);
                File f2 = new File( folder);

                dialog.store( dialog.chart, f2, filename);

                MeasurementTable tab = new MeasurementTable();

                File f = new File( "/Volumes/MyExternalDrive/CALCULATIONS/data/out/FS_" + filename + ".dat" );
                tab.setMessReihen( mrs );

                tab.writeToFile( f );

                return dialog.getContentPane();

    }

    public static void openNormalized(final Vector<TimeSeriesObject> mrs, final String string, final String x, final String y, final boolean b) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                final MultiChartTwoAxis dialog = new MultiChartTwoAxis(new javax.swing.JFrame( string ), false);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        dialog.setVisible(false);
                    }
                });
                Enumeration<TimeSeriesObject> en = mrs.elements();
                int nr = 0;
                while (en.hasMoreElements()) {
                    TimeSeriesObject mr = en.nextElement();
                    mr.normalize();
                    
                    dialog.initMessreihe( mr , nr );
                    //System.out.println( mr.getStatisticData("> ") );
                    nr++;
                }
                
                dialog.chartTitle = string;
                dialog.xLabel = x;
                dialog.yLabel = y;
                dialog.useLegende = b;

                dialog.initChart();
                dialog.setTitle(string);
                dialog.setVisible(true);
            }
        });
    }
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chartPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea statisticTextField;

    public JTextArea getStatisticTextField() {
        return statisticTextField;
    }

    public void setStatisticTextField(JTextArea statisticTextField) {
        this.statisticTextField = statisticTextField;
    }
    // End of variables declaration//GEN-END:variables


    public void initMessreihe(TimeSeriesObject mr, int nr) {
        // if ( this.normalizeY ) mr.normalizeY();
        XYSeries series = new XYSeries(mr.getLabel());

        Vector<Double> x = mr.getXValues();
        Vector<Double> y = mr.getYValues();

        for (int i = 0; i < x.size(); i++) {
            
            series.add(x.elementAt(i), y.elementAt(i));
            
        }
        series.setDescription(mr.getLabel());
        
        if ( nr < nrInDS1 ) {
            this.addSerie(series);
        }
        else {
            this.addSecondSerie( series );
        };    
    }

    public void addSerie(XYSeries serie) {
        dataset.addSeries(serie);
    }
    
    public void addSecondSerie(XYSeries serie) {
        dataset2.addSeries(serie);
    }
    

    public void store(JFreeChart cp, File folder, String filename) {
        if (doStoreChart) {


//            File folder = LogFile.folderFile;
//            String fn = folder.getAbsolutePath() + File.separator + "images/Distribution_";
//            File file = null;
//            fn = fn + GeneralResultRecorder.currentSimulationLabel;


            String fn = filename;
            try {

                final File file1 = new File(folder.getAbsolutePath() + File.separator + fn + ".png");
                System.out.println("\n>>> Save as PNG Image - Filename: " + file1.getAbsolutePath()
                        + "; CP: "+ cp);
                            try {
                final ChartRenderingInfo info = new ChartRenderingInfo
                (new StandardEntityCollection());

                Thread.currentThread().sleep(1000);

                ChartUtilities.saveChartAsPNG(file1, chart, 600, 400, info);

                Thread.currentThread().sleep(1000);
            }
            catch (Exception e) {
                e.printStackTrace();
            }



//                File file = new File(folder.getAbsolutePath() + File.separator + fn + ".svg");
//                System.out.println(">>> Save as SVG Image - Filename: " + file.getAbsolutePath()
//                        + "; CP: "+ cp);
//
//
//                // Get a DOMImplementation and create an XML document
//                DOMImplementation domImpl =
//                        GenericDOMImplementation.getDOMImplementation();
//                Document document = domImpl.createDocument(null, "svg", null);
//
//                // Create an instance of the SVG Generator
//                SVGGraphics2D svgGenerator = new SVGGraphics2D(document);
//
//                // draw the chart in the SVG generator
//                cp.draw(svgGenerator, new Rectangle(800, 600));
//
//                // Write svg file
//                OutputStream outputStream = new FileOutputStream(file);
//                Writer out = new OutputStreamWriter(outputStream, "UTF-8");
//                svgGenerator.stream(out, true /* use css */);
//                outputStream.flush();
//                outputStream.close();
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }
    }


    void initChart() {
        chartPanel.removeAll();
        ChartPanel cp = _createChartPanel();
        chartPanel.add(cp, BorderLayout.CENTER);
    }

    public ChartPanel _createChartPanel() {
        JFreeChart chart2 = ChartFactory.createXYLineChart(
                chartTitle,
                xLabel,
                yLabel,
                dataset,
                PlotOrientation.VERTICAL,
                useLegende, // legende
                true,
                true);

        XYPlot plot = chart2.getXYPlot();
        plot.setBackgroundPaint(Color.black);

        
         //      final StandardLegend legend = (StandardLegend) chart.getLegend();
    //    legend.setDisplaySeriesShapes(true);
        
 
         XYLineAndShapeRenderer renderer2 = (XYLineAndShapeRenderer) plot.getRenderer();

        BasicStroke s2 = new BasicStroke(
                    1.5f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND,
                    0.0f);
        
        renderer2.setSeriesStroke( 0, s2 );
        renderer2.setSeriesStroke( 1, s2 );
        renderer2.setSeriesStroke( 2, s2 );
        renderer2.setSeriesStroke( 3, s2 );
        renderer2.setSeriesStroke( 4, s2 );
        
        renderer2.setSeriesPaint(0, Color.GREEN);
        renderer2.setSeriesPaint(1, Color.blue);
        renderer2.setSeriesPaint(2, Color.orange);
        renderer2.setSeriesPaint(3, Color.RED);
        renderer2.setSeriesPaint(4, Color.gray);
        
                XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();

        BasicStroke s = new BasicStroke(
                    1.5f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND,
                    0.0f);
        
        renderer.setSeriesStroke( 0, s );
        renderer.setSeriesStroke( 1, s );
        renderer.setSeriesStroke( 2, s );
        renderer.setSeriesStroke( 3, s );
        renderer.setSeriesStroke( 4, s );

        
        final NumberAxis axis2 = new NumberAxis("CC(i)");
        axis2.setAutoRangeIncludesZero(false);
        plot.setDataset(1, dataset);
        plot.setRenderer(1, renderer );
 
        plot.setDataset(2, getDataset2());
        plot.setRenderer(2, renderer2);
        plot.setRangeAxis(2, axis2);
        
        
        plot.mapDatasetToRangeAxis(2, 2);
         
//        if ( dcSet == null ) {
            plot.getRenderer(1).setSeriesPaint(0, Color.CYAN );
            plot.getRenderer(1).setSeriesPaint(1, Color.GRAY);
            plot.getRenderer(1).setSeriesPaint(2, Color.orange);
            plot.getRenderer(1).setSeriesPaint(3, Color.PINK);
            plot.getRenderer(1).setSeriesPaint(4, Color.gray);
            
            plot.getRenderer(2).setSeriesPaint(0, Color.RED);
            plot.getRenderer(2).setSeriesPaint(1, Color.BLUE);
            plot.getRenderer(2).setSeriesPaint(2, Color.GREEN);
            plot.getRenderer(2).setSeriesPaint(3, Color.YELLOW);
            plot.getRenderer(2).setSeriesPaint(4, Color.WHITE);
            
//        }
//        else {
//
//            int i = 0;
//            for( Color c : dcSet ) {
//                plot.getRenderer().setSeriesPaint(i,c);
//                System.out.println( "Color: " + c);
//                i++;
//            }
//        }



        ChartPanel chartPanel = new ChartPanel(chart2);
        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
        chart = chart2;
        return chartPanel;
    }

    boolean normalizeY = false;

    void normalizeY() {
        this.normalizeY = true;
    }

        public static void open(final Vector<TimeSeriesObject> mrs, final String string, final String x, final String y, final boolean b) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                final MultiChartTwoAxis dialog = new MultiChartTwoAxis(new javax.swing.JFrame( string ), false);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        dialog.setVisible(false);
                    }
                });
                Enumeration<TimeSeriesObject> en = mrs.elements();
                int nr =0;
                while (en.hasMoreElements()) {
                    TimeSeriesObject mr = en.nextElement();
                    dialog.initMessreihe( mr , nr);
                    //System.out.println( mr.getStatisticData("> ") );
                    nr++;
                }
                dialog.chartTitle = string;
                dialog.xLabel = x;
                dialog.yLabel = y;
                dialog.useLegende = b;

                dialog.initChart();
                dialog.setTitle(string);
                dialog.setVisible(true);
            }
        });
    }

    public static void store(final TimeSeriesObject[] mrs,
            final String string, final String x, final String y,
            final boolean b, final String folder, final String filename,
            String comment) {
        Vector<TimeSeriesObject> r = new Vector<TimeSeriesObject>();
        for( int i=0; i < mrs.length; i++) {
            r.add( mrs[i] );
        }
        store( r, string, x, y, b, folder, filename, comment);
    }


    public static void store(final Vector<TimeSeriesObject> mrs,
            final String string, final String x, final String y,
            final boolean b, final String folder, final String filename,
            String comment) {

                final MultiChartTwoAxis dialog = new MultiChartTwoAxis(new javax.swing.JFrame( string ), false);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        dialog.setVisible(false);
                    }
                });

                Enumeration<TimeSeriesObject> en = mrs.elements();
                int i = 0;
                while (en.hasMoreElements()) {
                    TimeSeriesObject mr = en.nextElement();
                    dialog.initMessreihe( mr , i);
                    // System.out.println( "... init reihe="+i );
                    i++;
                }
                dialog.chartTitle = string;
                dialog.xLabel = x;
                dialog.yLabel = y;
                dialog.useLegende = b;

                dialog.statisticTextField.setText( comment );

                dialog.initChart();
                dialog.setTitle(string);
                //dialog.setVisible(true);
                File f2 = new File( folder);

                dialog.store( dialog.chart, f2, filename);

                MeasurementTable tab = new MeasurementTable();
                if ( mrs.size() > 0 ) {
                    File f = new File( folder + "/" + "TAB_" + filename + ".dat" );
                    tab.setMessReihen( mrs );
                    // System.out.println(mrs.size() + " reihen ...");
                    tab.writeToFile( f );
                }         

    }


//    public ChartPanel createChartPanel() {
//        JFreeChart chart = ChartFactory.createXYLineChart(
//                chartTitle,
//                xLabel,
//                yLabel,
//                dataset,
//                PlotOrientation.VERTICAL,
//                useLegende, // legende
//                true,
//                true);
//        chart.getXYPlot().setForegroundAlpha(0.75f);
//        ChartPanel chartPanel = new ChartPanel(chart);
//        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
//        return chartPanel;
//    }

    Color[] dcSet = null;

    public void setDefaultColors(Color[] dcSet1) {
        dcSet = dcSet1;
        initChart();
    }

    
    static public int nrInDS1 = 1;
    private XYDataset getDataset2() {
         return dataset2;
    }
}
